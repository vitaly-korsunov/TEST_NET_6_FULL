Create Project Web in Solution Test
in Project web add nuget
Microsoft.EntityFrameworkCore.Design 7.0.14
Microsoft.VisualStudio.Web.CodeGeneration.Design  6.0.16
-------------------------------------------------------------
Project Dal
Microsoft.EntityFrameworkCore.Relational 7.0.14
Microsoft.EntityFrameworkCore 7.0.14
Microsoft.EntityFrameworkCore.SqlServer 7.0.14
Microsoft.EntityFrameworkCore.Tools 7.0.14
-------------------------------------------------------------
Project Models
Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.3
-----------------------------------------------------------
Add reference in Web to Projects Dal and Models
move ErrorViewModel.cs from Web To Models
Change namespace in ErrorViewModel.cs and in  _ViewImports.cshtml
-----------------------------------------------------------
Project MODELS add File Product.cs
 public class Product
    {
        [Key]
        public int Id { get; set; }
        [Required]
        public string Name { get; set; }
        public string Description { get; set; }
        [Required]
        public DateTime? CreatedDate { get; set; }
        public bool IsActive { get; set; }
        [Range(1, int.MaxValue)]
        //[@CustomValidation]
        public int? Price { get; set; }
        [Display(Name = "Category Type")]
        public int CategoryId { get; set; }
        [ForeignKey("CategoryId")]
        public virtual Category Category { get; set; }
    }
	
Create File Category.cs
public class Category
{
    [Key]
    public int Id { get; set; }
    [Required]
    public string? Name { get; set; }
    [DisplayName("Display Name")]
    [Range(1, 60, ErrorMessage = "Display Order order must be between 1 and 60")]
    public int DisplayOrder { get; set; }
    public DateTime CreatedDateTime { get; set; } = DateTime.Now;
}
-------------------------------------------------------------

Product DAL Add Folder Data
Add File ApplicationDbContext.cs
public class ApplicationDbContext : DbContext
    {

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }
        public DbSet<Category> Category { get; set; }
        public DbSet<Product> Product { get; set; }
        
    }
------------------------------------------------------------
add in appsettings.json
 "ConnectionStrings": {
   // "DefaultConnection": "Server=.;Database=Test_Web;Trusted_Connection=true;MultipleActiveResultSets=True"
   // "DefaultConnection": "Server=(LockalDb)\MSSQLLocalDb;Database=Orky;Trusted_Connection=true;MultipleActiveResultSets=True"
    "DefaultConnection": "server=LAPTOP-I7OKMQKR;database=Test066;Trusted_Connection=True;MultipleActiveResultSets=true;User ID=sa;Password=1!Korsunov;Integrated Security=True;TrustServerCertificate=True"
 }
 ---------------------------------------------------------
 add in programme file
  builder.Services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(
   builder.Configuration.GetConnectionString("DefaultConnection")));
 // builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
 -------------------------------------------------------------------------------------
add-migration AddProductCategoryToDb Select DAL Project
update-database 
-----------------------------------------------------------------
Project DAL 
create folder Repository
create folder in folder Repository/IRepository
create file IRepository in Repository/IRepository.cs
-----------------------------------------------------------------
    public interface IRepository<T> where T : class
    {
			Task<T> GetFirstOrDefault(Expression<Func<T, bool>> filter, string? includeProperty = null);
			Task<IEnumerable<T>> GetAll(string? includeProperty = null);
			IEnumerable<T>  GetAllInclude(string? includeProperty = null);
			Task Add(T entity);
			Task Remove(T entity);
      
    }
------------------------------------------------------------------------------------------------
  public class Repository<T> : IRepository<T> where T : class
 {
     private readonly ApplicationDbContext _db;
     internal DbSet<T> dbSet;
     public Repository(ApplicationDbContext db)
     {
         _db = db;
         this.dbSet = _db.Set<T>();
     }
     public async Task Add(T entity)
     {
         await dbSet.AddAsync(entity);
         // dbSet.Add(entity); 
         // return true;
     }

     public async Task<IEnumerable<T>> GetAll(string? includeProperty = null)
     {
         IQueryable<T> query = dbSet;
         if (includeProperty != null)
         {
             foreach (var includeProp in includeProperty.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
             {
                 query = query.Include(includeProp);
             }

         }
         return await query.ToListAsync();
     }

     public IEnumerable<T> GetAllInclude(string? includeProperty = null)
     {
         IQueryable<T> query = dbSet;
         if (includeProperty != null)
         {
             foreach (var includeProp in includeProperty.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
             {
                 query = query.Include(includeProp);
             }

         }
         return   query.ToList();
     }

     public async Task<T> GetFirstOrDefault(Expression<Func<T, bool>> filter, string? includeProperty = null)
     {
         IQueryable<T> query = dbSet;
         query = query.Where(filter);
         if (includeProperty != null)
         {
             foreach (var includeProp in includeProperty.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
             {
                 query = query.Include(includeProp);
             }

         }
         return await query.FirstOrDefaultAsync();
     }

     public Task Remove(T entity)
     {
         dbSet.Remove(entity);
         return Task.CompletedTask;
     }


 }
-----------------------------------------------------------------------------------------------------------------------
public interface IProductRepository : IRepository<Product>
{
    void Update(Product obj);

}
-----------------------------------------------------------------------------------------------------------------------
      public class ProductRepository : Repository<Product>, IProductRepository
    {
        private readonly ApplicationDbContext _db;
        public ProductRepository(ApplicationDbContext db) : base(db)
        {
            _db = db;
        }
        public void Update(Product obj)
        {
            // _db.Products.Update(obj);
            var objFromDb = _db.Product.FirstOrDefault(p => p.Id == obj.Id);
            if (objFromDb != null)
            {
                objFromDb.Name = obj.Name;
                objFromDb.Description = obj.Description;
                objFromDb.Price = obj.Price;
                objFromDb.IsActive = obj.IsActive;
                objFromDb.CreatedDate = obj.CreatedDate;
                objFromDb.CategoryId = obj.CategoryId;
            }
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------
Create File ICategoryRepository
 public interface ICategoryRepository : IRepository<Category>
 {
      void Update(Category obj);
      
 }
---------------------------------------------------------------------------------------------------------------------------
Create File CategoryRepository
 public class CategoryRepository : Repository<Category>, ICategoryRepository
 {
     private readonly ApplicationDBContext _db;
     public CategoryRepository(ApplicationDBContext db) :base(db)
     {
         _db = db;
     }
    public void Update(Category obj)
     {
        _db.Categories.Update(obj);
     }
 }
----------------------------------------------------------------------------------------------------------------------------
 Create File IUnitOfWork 
 public interface IUnitOfWork:IAsyncDisposable
{
   // public ICategoryRepository Category { get; }
   // public ICoverTypeRepository CoverType { get; }
    public IProductRepository Product { get; }

  //  public void Save();
    Task Save();
}
---------------------------------------------------------------------------------------------------------
Create File UnitOfWork

 public class UnitOfWork : IUnitOfWork
 {
     private readonly ApplicationDbContext _db;

     //  public ICategoryRepository Category { get; private set; }
     //  public ICoverTypeRepository CoverType { get; private set; }
     public IProductRepository Product { get; private set; }

     public UnitOfWork(ApplicationDbContext db)
     {
         _db = db;
         //   Category = new CategoryRepository(_db);
         //   CoverType = new CoverTypeRepository(_db);
         Product = new ProductRepository(_db);
     }


     public async Task Save()
     {
         await _db.SaveChangesAsync();
     }

     public async ValueTask DisposeAsync()
     {
         await DisposeAsync(true);
         GC.SuppressFinalize(this);
     }

     private bool _disposed;
     protected virtual async ValueTask DisposeAsync(bool disposing)
     {

         if (!_disposed)
         {
             await _db.DisposeAsync();
         }
         _disposed = true;
     }
 }
-----------------------------------------------------------------------------------------------
Project MODELS 
add Folder ViewModels
add file ProductVM.cs
public class ProductVM
    {
        public Product Product { get; set; }
        public IEnumerable<SelectListItem>? CategorySelectList { get; set; }
    }
---------------------------------------------------------------------
Create Partial view _Notification.cshtml
@if(TempData["success"]!=null)
{
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
   <script type="text/javascript">
        toastr.success('@TempData["success"]')
       </script>
}

@if (TempData["error"] != null)
{
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script type="text/javascript">
        toastr.error('@TempData["error"]')
    </script>
}
--------------------------------------------------------------------------------------
In Project web _Layout.cshtml
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - WebCore</title>
    @*<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
        <link rel="stylesheet" href="~/css/site.css" />*@

    @*<link rel="stylesheet" href="~/Web.styles.css" asp-append-version="true" />*@
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="//cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">WebCore</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Product" asp-action="Index">Product</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            <partial name="_Notification" />
            @RenderBody()
        </main>
    </div>


    @*<script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
        <script src="~/js/site.js" asp-append-version="true"></script>
        @await RenderSectionAsync("Scripts", required: false)*@

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
--------------------------------------------------------------------------------------------------------------------------
add help.js in to wwwroot\js 
var dataTable;
$(document).ready(function () {
    loadDataTable();
});

function loadDataTable() {

    dataTable = $('#myTable').DataTable({
        "ajax": {
            "url": "/Product/GetAll"
        },
        "columns": [
            { "data": "name", "width": "15%" },
            { "data": "description", "width": "15%" },
            {
                "data": "createdDate",
                "render": function (data) {
                    if (data == null) return "";
                    var date = new Date(data);
                    var month = date.getMonth() + 1;
                    return ('0' + date.getDate()).slice(-2) + "/" + ('0' + month).slice(-2) + "/" + date.getFullYear();
                },
                "width": "15%"
            },
            {
                "data": "active",
                render: function (data) {
                    return data === true ?
                        'Active' :
                        'Non Active';
                },
                "width": "15%"
            },
            { "data": "price", "width": "15%" },
            { "data": "category.name", "with": "25%" },
            {
                "data": "id",
                "render": function (data) {
                    return `
                    <div class="w-75 btn-group" role = "group">
                        <a href = "/Product/Upsert?id=${data}"
                    class="btn btn-primary me-2"> <i class="bi bi-pencil-square"></i> Edit</a>
                        <button type="button" onclick=Delete('/Product/Delete/'+${data}) class="btn btn-danger me-2"> <i class="bi bi-trash-fill"></i> Delete</button>
                    </div > 
                    `
                },
                "width": "25%"
            }
        ]
    });
}

function Delete(url) {

    Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!"
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function (data) {
                    if (data.success) {
                        dataTable.ajax.reload();
                        toastr.success(data.message);
                    } else {
                        toastr.error(data.message);
                    }
                }
            })
        }
    });
}
--------------------------------------------------------------------------------------------------------------
@model Models.ViewModels.ProductVM

<form method="post" asp-action="Upsert" enctype="multipart/form-data">
    <input asp-for="Product.Id" hidden />
    <div class="border p-3 mt-4 row">
        <div class="col-12 pb-2">
            <h2 class="text-primary">@(Model.Product.Id != 0 ? "Update " : "Create ") Product</h2>
            <hr />
        </div>
        @*  <div asp-validation-summary="All"></div> *@
        <div class="mb-3">
            <label asp-for="Product.Name"></label>
            <input asp-for="Product.Name" class="form-control" />
            <span asp-validation-for="Product.Name" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="Product.Description"></label>
            <textarea asp-for="Product.Description" row="3" class="form-control"></textarea>
            <span asp-validation-for="Product.Description" class="text-danger"></span>
        </div>

        <div class="mb-3 col-6">
            <label asp-for="Product.CategoryId"></label>
            <select asp-for="Product.CategoryId" asp-items="@Model.CategorySelectList" class="form-control form-select-sm form-select">
                <option disabled selected>-- Select Category --</option>
            </select>
            <span asp-validation-for="Product.CategoryId" class="text-danger"></span>
        </div>
        <div class="mb-3 col-6">
            <label></label>
            <div class="mb-3 col-6">
                <input type="checkbox" asp-for="Product.Active" class="form-check-input" />
                <label class="form-check-label" for="flexCheckDefault">
                    Is Active
                </label>
            </div>
        </div>
        <div class="mb-3 col-6">
            <label asp-for="Product.CreatedDate"></label>
            <input type="text" asp-for="Product.CreatedDate" asp-format=" {0:dd/MM/yyyy}" class="form-control" id="datepicker" />
            <span asp-validation-for="Product.CreatedDate" class="text-danger"></span>
        </div>
        <div class="mb-3 col-6">
            <label asp-for="Product.Price"></label>
            <input asp-for="Product.Price" class="form-control" />
            <span asp-validation-for="Product.Price" class="text-danger"></span>
        </div>
        <div class="col-12">
            @if (Model.Product.Id != 0)
            {
                <button type="submit" class="btn btn-primary" style="width:150px">Update</button>
            }
            else
            {
                <button type="submit" class="btn btn-primary" style="width:150px">Create</button>
            }
            <a asp-asp-controller="Product" asp-action="Index" class="btn btn-secondary" style="width:150px">
                Back To List
            </a>
        </div>
    </div>
</form>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.min.js"></script>
*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>

<script>

    $('#datepicker').datepicker({
        format: "dd/mm/yyyy",
        language: "he",
        autoclose: true,
        todayHighlight: true
    });
</script>

@* @section Scripts{
    @{
        <partial name="_ValidationScriptsPartial.cshtml" />
    }
}
 *@
---------------------------------------------------------------------------------------------------------------------------
Project WEB  add ProductController
    public class ProductController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
       
        public ProductController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
           
        }
        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Create()
        {

            return View();
        }


        public async Task<IActionResult> Upsert(int? id)
        {
            // Product product = new Product();

            ProductVM productVM = new()
            {
                Product = new(),
                CategorySelectList = _unitOfWork.Category.GetAllInclude().Select(c => new SelectListItem
                {
                    Text = c.Name,
                    Value = c.Id.ToString(),
                })
            };

            if (id == null || id == 0)
            {
                return View(productVM);
            }
            else
            {
                productVM.Product = await _unitOfWork.Product.GetFirstOrDefault(c => c.Id == id);
                // update product
                return View(productVM);
            }

        }

        [HttpPost]
        public async Task<IActionResult> Upsert(ProductVM obj)
        {
         
            if (ModelState.IsValid)
            {
           
                if (obj.Product.Id == 0)
                {
                    _unitOfWork.Product.Add(obj.Product);
                }
                else
                {
                    _unitOfWork.Product.Update(obj.Product);
                }

                await _unitOfWork.Save();
                TempData["success"] = "Product created successfully";
                return RedirectToAction("Index");
            }
            return View(obj);

        } 

        #region API CALL
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var productList = await _unitOfWork.Product.GetAll(includeProperty: "Category");
            return Json(new { data = productList });
        }

        [HttpDelete]
        public async Task<IActionResult> Delete(int? id)
        {
            var obj = await _unitOfWork.Product.GetFirstOrDefault(c => c.Id == id);
            if (obj == null)
            {
                return Json(new { success = false, Message = "Error while deleting" });
            }
             
            _unitOfWork.Product.Remove(obj);
            _unitOfWork.Save();
            return Json(new { success = true, Message = "Delete Successful" });

        }
        #endregion
    }
}
---------------------------------------------------------------------------------------------------------
Add View Upsert
@model Models.ViewModels.ProductVM

<form method="post" asp-action="Upsert" enctype="multipart/form-data">
    <input asp-for="Product.Id" hidden />
    <div class="border p-3 mt-4 row">
        <div class="col-12 pb-2">
            <h2 class="text-primary">@(Model.Product.Id != 0 ? "Update " : "Create ") Product</h2>
            <hr />
        </div>
        @*  <div asp-validation-summary="All"></div> *@
        <div class="mb-3">
            <label asp-for="Product.Name"></label>
            <input asp-for="Product.Name" class="form-control" />
            <span asp-validation-for="Product.Name" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="Product.Description"></label>
            <textarea asp-for="Product.Description" row="3" class="form-control"></textarea>
            <span asp-validation-for="Product.Description" class="text-danger"></span>
        </div>

        <div class="mb-3 col-6">
            <label asp-for="Product.CategoryId"></label>
            <select asp-for="Product.CategoryId" asp-items="@Model.CategorySelectList" class="form-control form-select-sm form-select">
                <option disabled selected>-- Select Category --</option>
            </select>
            <span asp-validation-for="Product.CategoryId" class="text-danger"></span>
        </div>
        <div class="mb-3 col-6">
            <label></label>
            <div class="mb-3 col-6">
                <input type="checkbox" asp-for="Product.Active" class="form-check-input" />
                <label class="form-check-label" for="flexCheckDefault">
                    Is Active
                </label>
            </div>
        </div>
        <div class="mb-3 col-6">
            <label asp-for="Product.CreatedDate"></label>
            <input type="text" asp-for="Product.CreatedDate" asp-format=" {0:dd/MM/yyyy}" class="form-control" id="datepicker" />
            <span asp-validation-for="Product.CreatedDate" class="text-danger"></span>
        </div>
        <div class="mb-3 col-6">
            <label asp-for="Product.Price"></label>
            <input asp-for="Product.Price" class="form-control" />
            <span asp-validation-for="Product.Price" class="text-danger"></span>
        </div>
        <div class="col-12">
            @if (Model.Product.Id != 0)
            {
                <button type="submit" class="btn btn-primary" style="width:150px">Update</button>
            }
            else
            {
                <button type="submit" class="btn btn-primary" style="width:150px">Create</button>
            }
            <a asp-asp-controller="Product" asp-action="Index" class="btn btn-secondary" style="width:150px">
                Back To List
            </a>
        </div>
    </div>
</form>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.min.js"></script>
*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>

<script>

    $('#datepicker').datepicker({
        format: "dd/mm/yyyy",
        language: "he",
        autoclose: true,
        todayHighlight: true
    });
</script>

@* @section Scripts{
    @{
        <partial name="_ValidationScriptsPartial.cshtml" />
    }
}
 *@
-----------------------------------------------------------------------------------------------------------------------
in Project Models add file CustomValidation.cs
public class CustomValidation : ValidationAttribute
{
    protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
    {
        var product = (Product)validationContext.ObjectInstance;
        if (product.Price > 200)  
        {
           // product.CreatedDate.Value.Year;
           if(product?.CreatedDate.Value >  DateTime.Now) 
            {
                return new ValidationResult("Mast be less then today");
            }
            else
            {
                return ValidationResult.Success;
            }
        }
        else
        {
            return new ValidationResult("Mast be greate then 200");
        }

    }
}





	